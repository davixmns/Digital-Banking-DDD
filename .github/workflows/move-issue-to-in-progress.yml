# .github/workflows/move-issue-to-in-progress.yml
name: Mover issue para In Progress no Project v2

on:
  create:
    ref_type: branch

permissions:
  contents: read
  issues: read
  pull-requests: write
  projects: write

jobs:
  move-issue-in-project:
    runs-on: ubuntu-latest
    steps:
      - name: Extrair código da branch
        id: extract
        run: |
          # Exemplo de branch: feature/123-minha-feature
          CODE="$(echo "${GITHUB_REF##*/}" | grep -oE '[0-9]+')"
          echo "code=$CODE" >> $GITHUB_OUTPUT

      - name: Buscar issue pelo número extraído
        id: get_issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = parseInt('${{ steps.extract.outputs.code }}', 10);
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            return issue.node_id;

      - name: Atualizar status no Project v2
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectId       = '${{ secrets.PROJECT_V2_ID }}';
            const itemId          = '${{ steps.get_issue.outputs.result }}';
            const fieldId         = '${{ secrets.STATUS_FIELD_ID }}';
            const optionId        = '${{ secrets.IN_PROGRESS_OPTION_ID }}';
            const mutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: {
                    singleSelectOptionId: $optionId
                  }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;
            const result = await github.graphql(mutation, { projectId, itemId, fieldId, optionId });
            console.log("Item atualizado:", result.updateProjectV2ItemFieldValue.projectV2Item.id);
