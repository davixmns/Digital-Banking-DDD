name: Atualizar Status da Issue para In Progress na Criação de Branch

on:
  create:
    branches:
      - '**'

jobs:
  update_issue_status:
    runs-on: ubuntu-latest
    steps:
      - name: Extrair número da issue da branch
        id: extract
        run: |
          if [[ "${{ github.ref_name }}" =~ .*/([0-9]+)_.* ]]; then
            echo "ISSUE_NUMBER=${BASH_REMATCH[1]}" >> $GITHUB_ENV
            echo "matched=true" >> $GITHUB_ENV
          else
            echo "matched=false" >> $GITHUB_ENV
          fi

      - name: Parar se não for branch de issue
        if: env.matched != 'true'
        run: |
          echo "Branch sem padrão de issue. Abortando."

#      - name: Autenticar GitHub CLI
#        if: env.matched == 'true'
#        run: |
#          echo "${{ secrets.PERSONAL_ACCESS_TOKEN }}" | gh auth login --with-token

      - name: Obter IDs do projeto e do campo Status
        if: env.matched == 'true'
        run: |
          gh api graphql -f query='
            query {
              viewer {
                projectV2(number: 4) {
                  id
                  fields(first: 20) {
                    nodes {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' > project.json

          echo "PROJECT_ID=$(jq -r .data.viewer.projectV2.id project.json)" >> $GITHUB_ENV
          echo "STATUS_FIELD_ID=$(jq -r '.data.viewer.projectV2.fields.nodes[] | select(.name==\"Status\") | .id' project.json)" >> $GITHUB_ENV
          echo "IN_PROGRESS_OPTION_ID=$(jq -r '.data.viewer.projectV2.fields.nodes[] | select(.name==\"Status\") | .options[] | select(.name==\"In Progress\") | .id' project.json)" >> $GITHUB_ENV

      - name: Obter o node ID da issue
        if: env.matched == 'true'
        run: |
          ISSUE_ID=$(gh api graphql -f query='
            query($owner:String!,$repo:String!,$number:Int!) {
              repository(owner:$owner,name:$repo) {
                issue(number:$number) { id }
              }
            }' \
            -f owner="${{ github.repository_owner }}" \
            -f repo="${{ github.event.repository.name }}" \
            -f number=$ISSUE_NUMBER \
            --jq .data.repository.issue.id)
          echo "ISSUE_ID=$ISSUE_ID" >> $GITHUB_ENV

      - name: Encontrar item do projeto associado à issue
        if: env.matched == 'true'
        run: |
          gh api graphql -f query='
            query($project:ID!) {
              node(id:$project) {
                ... on ProjectV2 {
                  items(first:100) {
                    nodes {
                      id
                      content {
                        __typename
                        ... on Issue { id }
                      }
                    }
                  }
                }
              }
            }' -f project=$PROJECT_ID > items.json

          ITEM_ID=$(jq -r --arg issueId "$ISSUE_ID" \
            '.data.node.items.nodes[] | select(.content.id == $issueId) | .id' items.json)
          echo "ITEM_ID=$ITEM_ID" >> $GITHUB_ENV

      - name: Atualizar Status para In Progress
        if: env.ITEM_ID
        run: |
          gh api graphql -f query='
            mutation($project:ID!,$item:ID!,$field:ID!,$option:String!) {
              updateProjectV2ItemFieldValue(input:{
                projectId:$project,
                itemId:$item,
                fieldId:$field,
                value:{ singleSelectOptionId:$option }
              }) { projectV2Item { id } }
            }' \
            -f project=$PROJECT_ID \
            -f item=$ITEM_ID \
            -f field=$STATUS_FIELD_ID \
            -f option=$IN_PROGRESS_OPTION_ID

      - name: Log de conclusão
        if: env.ITEM_ID
        run: echo "Issue #$ISSUE_NUMBER movida para In Progress no projeto."
