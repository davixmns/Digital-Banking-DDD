name: Update Issue Status on Branch Creation

on:
  create:

jobs:
  update-issue-status:
    if: github.event.ref_type == 'branch'
    runs-on: ubuntu-latest
    steps:
      - name: Extract issue number from branch name
        id: extract
        run: |
          branch_name=${{ github.event.ref }}
          if [[ $branch_name =~ ^feat\/([0-9]+)_ ]]; then
            issue_number=${BASH_REMATCH[1]}
            echo "issue_number=$issue_number" >> $GITHUB_OUTPUT
          else
            echo "No issue number found in branch name"
            exit 1
          fi
      - name: List projects
        run: |
          echo '{"query": "query { repository(owner: \"${{ github.repository_owner }}\", name: \"${{ github.event.repository.name }}\") { projectsV2(first: 10) { nodes { id title number } } } }"}' | \
          curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
               -H "Content-Type: application/json" \
               -X POST \
               -d @- \
               https://api.github.com/graphql | tee projects.json
          cat projects.json

      - name: Update issue status in Projects V2
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const projectNumber = 4; // Substitua pelo número do seu projeto
            const issueNumber = ${{ steps.extract.outputs.issue_number }};

            // Obter o node_id da issue
            const issue = await github.rest.issues.get({
              owner,
              repo,
              issue_number: issueNumber,
            });
            const issueNodeId = issue.data.node_id;

            // Obter informações do projeto
            const project = await github.graphql(
              `query($owner: String!, $repo: String!, $projectNumber: Int!) {
                repository(owner: $owner, name: $repo) {
                  projectV2(number: $projectNumber) {
                    id
                    fields(first: 100) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }`,
              { owner, repo, projectNumber }
            );

            const projectId = project.repository.projectV2.id;
            const fields = project.repository.projectV2.fields.nodes;

            // Encontrar o campo "Status" e a opção "In Progress"
            const statusField = fields.find(field => field.name === 'Status');
            if (!statusField) throw new Error('Status field not found');
            const inProgressOption = statusField.options.find(option => option.name === 'In Progress');
            if (!inProgressOption) throw new Error('In Progress option not found');

            // Verificar se a issue já está no projeto
            const items = await github.graphql(
              `query($projectId: ID!, $issueNodeId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    items(first: 100, contentIds: [$issueNodeId]) {
                      nodes {
                        id
                      }
                    }
                  }
                }
              }`,
              { projectId, issueNodeId }
            );

            let itemId;
            if (items.node.items.nodes.length > 0) {
              itemId = items.node.items.nodes[0].id;
            } else {
              // Adicionar a issue ao projeto
              const addItem = await github.graphql(
                `mutation($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                    item {
                      id
                    }
                  }
                }`,
                { projectId, contentId: issueNodeId }
              );
              itemId = addItem.addProjectV2ItemById.item.id;
            }

            // Atualizar o status para "In Progress"
            await github.graphql(
              `mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: { singleSelectOptionId: $value }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }`,
              {
                projectId,
                itemId,
                fieldId: statusField.id,
                value: inProgressOption.id,
              }
            );