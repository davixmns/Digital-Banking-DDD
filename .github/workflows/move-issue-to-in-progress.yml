
  name: Update Issue Status on Branch Creation
  
  on:
    create:
  
  jobs:
    update-issue-status:
      if: github.event.ref_type == 'branch'
      runs-on: ubuntu-latest
      steps:
        - name: Extract issue number from branch name
          id: extract
          run: |
            branch_name=${{ github.event.ref }}
            if [[ $branch_name =~ ^feat\/([0-9]+)_ ]]; then
              issue_number=${BASH_REMATCH[1]}
              echo "issue_number=$issue_number" >> $GITHUB_OUTPUT
            else
              echo "No issue number found in branch name"
              exit 1
            fi

        - name: Update issue status in Projects V2
          uses: actions/github-script@v6
          env:
            GITHUB_TOKEN: ${{ secrets.PAT_PROJECTS_V2 }} # PAT com escopos repo e project
          with:
            script: |
              const { owner, repo } = context.repo;
              const projectNumber = 4; // Projeto no nível do repositório
              const issueNumber = ${{ steps.extract.outputs.issue_number }};
              
              // Obter node ID da issue
              const issue = await github.rest.issues.get({
                owner,
                repo,
                issue_number: issueNumber,
              });
              const issueNodeId = issue.data.node_id;
              
              // Obter ID do projeto
              const project = await github.graphql(
                `query($owner: String!, $repo: String!, $projectNumber: Int!) {
                  repository(owner: $owner, name: $repo) {
                    projectV2(number: $projectNumber) {
                      id
                      fields(first: 100) {
                        nodes {
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }`,
                { owner, repo, projectNumber }
              );
              const projectId = project.repository.projectV2.id;
              const fields = project.repository.projectV2.fields.nodes;
              
              // Encontrar campo Status e opção In Progress
              const statusField = fields.find(field => field.name === 'Status');
              if (!statusField) throw new Error('Campo Status não encontrado');
              const inProgressOption = statusField.options.find(option => option.name === 'In Progress');
              if (!inProgressOption) throw new Error('Opção In Progress não encontrada');
              
              // Adicionar issue ao projeto ou obter itemId existente
              const addItemResult = await github.graphql(
                `mutation($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                    item {
                      id
                    }
                  }
                }`,
                { projectId, contentId: issueNodeId }
              );
              const itemId = addItemResult.addProjectV2ItemById.item.id;
              
              // Atualizar status para In Progress
              await github.graphql(
                `mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { singleSelectOptionId: $value }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }`,
                {
                  projectId,
                  itemId,
                  fieldId: statusField.id,
                  value: inProgressOption.id,
                }
              );
