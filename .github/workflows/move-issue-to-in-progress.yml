# .github/workflows/move-issue-to-in-progress.yml
name: Mover issue para In Progress no Project v2

on:
  create:
    ref_type: branch

permissions:
  contents: read
  issues: read
  pull-requests: write
  repository-projects: write

jobs:
  move-issue-in-project:
    runs-on: ubuntu-latest
    steps:
      - name: Extrair código da branch
        id: extract
        run: |
          # Exemplo de branch: feature/123-minha-feature
          CODE="$(echo "${GITHUB_REF##*/}" | grep -oE '[0-9]+')"
          if [ -z "$CODE" ]; then
            echo "Nenhum número encontrado no nome da branch. Pulando."
            exit 0
          fi
          echo "code=$CODE" >> $GITHUB_OUTPUT

      - name: Buscar node_id da issue
        id: get_issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = parseInt(process.env.BRANCH_CODE, 10);
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            // Define saída 'node_id' para o próximo passo
            core.setOutput('node_id', issue.node_id);
        env:
          BRANCH_CODE: ${{ steps.extract.outputs.code }}

      - name: Atualizar status no Project v2
        if: steps.get_issue.outputs.node_id
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectId = '${{ secrets.PROJECT_V2_ID }}';
            const itemId    = '${{ steps.get_issue.outputs.node_id }}';
            const fieldId   = '${{ secrets.STATUS_FIELD_ID }}';
            const optionId  = '${{ secrets.IN_PROGRESS_OPTION_ID }}';

            const mutation = `
              mutation(
                $projectId: ID!
                $itemId: ID!
                $fieldId: ID!
                $optionId: String!
              ) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: {
                    singleSelectOptionId: $optionId
                  }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;

            const variables = { projectId, itemId, fieldId, optionId };
            const result = await github.graphql(mutation, variables);
            console.log("Item atualizado:", result.updateProjectV2ItemFieldValue.projectV2Item.id);
